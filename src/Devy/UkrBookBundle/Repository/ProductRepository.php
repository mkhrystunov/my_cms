<?php

namespace Devy\UkrBookBundle\Repository;

use Devy\UkrBookBundle\Entity\Brand;
use Devy\UkrBookBundle\Entity\Category;
use Devy\UkrBookBundle\Entity\Product;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends EntityRepository
{
    const SORT_NAME_ASC = 'name_asc';
    const SORT_NAME_DESC = 'name_desc';
    const SORT_PRICE_ASC = 'price_asc';
    const SORT_PRICE_DESC = 'price_desc';

    /**
     * @return Product[]
     */
    public function getAllSortedByIsActive()
    {
        $queryBuilder = $this->createQueryBuilder('p')
            ->orderBy('p.is_active', 'DESC');
        try {
            $products = $queryBuilder->getQuery()->getResult();
        } catch (NoResultException $e) {
            $products = [];
        }
        return $products;
    }

    /**
     * @param int $limit
     * @return Product[]
     */
    public function getLastAdded($limit = 12)
    {
        $queryBuilder = $this->createQueryBuilder('p')
            ->where('p.is_active = true')
            ->orderBy('p.created_at', 'DESC')
            ->setMaxResults($limit);
        try {
            $products = $queryBuilder->getQuery()->getResult();
        } catch (NoResultException $e) {
            $products = [];
        }
        return $products;
    }

    /**
     * @param int $page
     * @param int $limit
     * @param Category $category
     * @param int|null $sort
     * @return Product[]
     */
    public function getByCategoryPaginatedSorted($page, $limit, Category $category, $sort = null)
    {
        $queryBuilder = $this->createQueryBuilder('p')
            ->where('p.is_active = true')
            ->andWhere('p.Category = :category')
            ->setFirstResult(($page - 1) * $limit)
            ->setMaxResults($limit)
            ->setParameter(':category', $category);

        switch ($sort) {
            case self::SORT_PRICE_ASC:
                $queryBuilder->orderBy('p.price', 'ASC');
                break;
            case self::SORT_PRICE_DESC:
                $queryBuilder->orderBy('p.price', 'DESC');
                break;
            case self::SORT_NAME_ASC:
                $queryBuilder->orderBy('p.title', 'ASC');
                break;
            case self::SORT_NAME_DESC:
            default:
                $queryBuilder->orderBy('p.title', 'DESC');
                break;
        }

        try {
            $products = $queryBuilder->getQuery()->getResult();
        } catch (NoResultException $e) {
            $products = [];
        }
        return $products;
    }

    /**
     * @param int $limit
     * @param string $pattern
     * @return Product[]
     */
    public function getBySearch($limit, $pattern)
    {
        $queryBuilder = $this->createQueryBuilder('p')
            ->where('p.is_active = true')
            ->setMaxResults($limit);
        $queryBuilder
            ->andWhere($queryBuilder->expr()->like('p.title', $queryBuilder->expr()->literal('%' . $pattern . '%')));

        try {
            $products = $queryBuilder->getQuery()->getResult();
        } catch (NoResultException $e) {
            $products = [];
        }
        return $products;
    }

    /**
     * @param int $page
     * @param int $limit
     * @param Brand $brand
     * @return Product[]
     */
    public function getByBrandPaginated($page, $limit, Brand $brand)
    {
        $queryBuilder = $this->createQueryBuilder('p')
            ->where('p.is_active = true')
            ->andWhere('p.Brand = :brand')
            ->setFirstResult(($page - 1) * $limit)
            ->setMaxResults($limit)
            ->setParameter(':brand', $brand);

        try {
            $products = $queryBuilder->getQuery()->getResult();
        } catch (NoResultException $e) {
            $products = [];
        }
        return $products;
    }
}
